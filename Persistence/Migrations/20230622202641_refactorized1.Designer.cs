// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(RosaFiestaContext))]
    [Migration("20230622202641_refactorized1")]
    partial class refactorized1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RosaFiesta")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Quotes", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasMaxLength(250)
                        .HasColumnType("integer");

                    b.Property<int>("QuoteId")
                        .HasMaxLength(36)
                        .HasColumnType("integer");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("ServiceId");

                    b.ToTable("QuoteItemEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("character varying(700)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityAvaliable")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Services", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CategoryEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 18, DateTimeKind.Unspecified).AddTicks(7528), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            Description = "Peluches de todos los tipos",
                            Icon = "https://i.imgur.com/0jQYs1R.png",
                            IsDeleted = false,
                            Name = "Peluches"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.DiscountEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxTimesApply")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasMaxLength(25)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Code");

                    b.ToTable("DiscountEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Code = "ROSA",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 21, DateTimeKind.Unspecified).AddTicks(1846), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "10% de descuento en todos los productos",
                            End = new DateTimeOffset(new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            MaxTimesApply = 5,
                            Name = "Descuento Inicial",
                            Start = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 21, DateTimeKind.Unspecified).AddTicks(1837), new TimeSpan(0, 0, 0, 0, 0)),
                            Type = 1,
                            Value = 200.0
                        },
                        new
                        {
                            Code = "WELCOME",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 21, DateTimeKind.Unspecified).AddTicks(1850), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "100$ de descuento en todos los productos",
                            End = new DateTimeOffset(new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            MaxTimesApply = 1,
                            Name = "Descuento de Bienvenida",
                            Start = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 21, DateTimeKind.Unspecified).AddTicks(1849), new TimeSpan(0, 0, 0, 0, 0)),
                            Type = 0,
                            Value = 10.0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.MultipleOptionImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionImages", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Condition")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GenderFor")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Material")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("QuantityAvaliable")
                        .HasColumnType("integer");

                    b.Property<float?>("Size")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductCode");

                    b.ToTable("Options", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Gold",
                            Condition = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 22, DateTimeKind.Unspecified).AddTicks(6734), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Polo de manga larga",
                            GenderFor = 3,
                            IsDeleted = false,
                            Material = 6,
                            Price = 1200.0,
                            ProductCode = "SDA01",
                            QuantityAvaliable = 8,
                            Size = 1.7f,
                            Weight = 0.7f
                        },
                        new
                        {
                            Id = 2,
                            Color = "White",
                            Condition = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 22, DateTimeKind.Unspecified).AddTicks(6741), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Polo de manga corta",
                            GenderFor = 3,
                            IsDeleted = false,
                            Material = 6,
                            Price = 800.0,
                            ProductCode = "SDA01",
                            QuantityAvaliable = 10,
                            Size = 1.5f,
                            Weight = 0.5f
                        },
                        new
                        {
                            Id = 3,
                            Color = "Green",
                            Condition = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 22, DateTimeKind.Unspecified).AddTicks(6745), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Polo XL",
                            GenderFor = 3,
                            IsDeleted = false,
                            Material = 6,
                            Price = 1400.0,
                            ProductCode = "SDA02",
                            QuantityAvaliable = 10,
                            Size = 2f,
                            Weight = 1f
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WarrantyId")
                        .HasColumnType("uuid");

                    b.HasKey("Code");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("ProductEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Code = "SDA01",
                            Brand = "Champion",
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 27, DateTimeKind.Unspecified).AddTicks(4193), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            SupplierId = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f9"),
                            Title = "Polo",
                            Type = 1,
                            WarrantyId = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f6")
                        },
                        new
                        {
                            Code = "SDA02",
                            Brand = "Flores",
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 27, DateTimeKind.Unspecified).AddTicks(4391), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            SupplierId = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f9"),
                            Title = "Flores",
                            Type = 1,
                            WarrantyId = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f6")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductsDiscountsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("OptionId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductCode")
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductCode");

                    b.ToTable("ProductsDiscountsEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f4"),
                            Code = "ROSA",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 27, DateTimeKind.Unspecified).AddTicks(9428), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            OptionId = 1,
                            ProductCode = "SDA01"
                        },
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f5"),
                            Code = "WELCOME",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 27, DateTimeKind.Unspecified).AddTicks(9453), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            OptionId = 2,
                            ProductCode = "SDA01"
                        },
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f6"),
                            Code = "WELCOME",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 27, DateTimeKind.Unspecified).AddTicks(9455), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            OptionId = 3,
                            ProductCode = "SDA02"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.SubCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubCategoryEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 34, DateTimeKind.Unspecified).AddTicks(2134), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Electronics",
                            Icon = "https://i.imgur.com/0jQYs1R.png",
                            IsDeleted = false,
                            Name = "Electronics"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.SupplierEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SupplierEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f9"),
                            Address = "La Capital",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 34, DateTimeKind.Unspecified).AddTicks(5376), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "suplidor@hotmail.com",
                            IsDeleted = false,
                            Name = "Supplier 1",
                            Phone = "8095395539"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.AppliedDiscountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AppliedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("UserId");

                    b.ToTable("AppliedDiscounts", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliedDate = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 15, DateTimeKind.Unspecified).AddTicks(4853), new TimeSpan(0, -4, 0, 0, 0)),
                            Code = "ROSA",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 15, DateTimeKind.Unspecified).AddTicks(4514), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        },
                        new
                        {
                            Id = 2,
                            AppliedDate = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 15, DateTimeKind.Unspecified).AddTicks(4856), new TimeSpan(0, -4, 0, 0, 0)),
                            Code = "WELCOME",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 15, DateTimeKind.Unspecified).AddTicks(4855), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        },
                        new
                        {
                            Id = 3,
                            AppliedDate = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 15, DateTimeKind.Unspecified).AddTicks(4859), new TimeSpan(0, -4, 0, 0, 0)),
                            Code = "WELCOME",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 15, DateTimeKind.Unspecified).AddTicks(4857), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CartEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        },
                        new
                        {
                            CartId = 2,
                            UserId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3"
                        },
                        new
                        {
                            CartId = 3,
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E1"
                        },
                        new
                        {
                            CartId = 4,
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E2"
                        },
                        new
                        {
                            CartId = 5,
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PayMethodId")
                        .HasColumnType("uuid");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("double precision");

                    b.Property<double>("TaxesCost")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("VoucherNumber")
                        .HasColumnType("integer");

                    b.Property<string>("VoucherSeries")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("VoucherType")
                        .HasMaxLength(35)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PayMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PayMethodEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PayMethodType")
                        .HasMaxLength(10)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PayMethodEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 24, DateTimeKind.Unspecified).AddTicks(1606), new TimeSpan(0, -4, 0, 0, 0)),
                            Description = "Cash payment",
                            IsDeleted = false,
                            Name = "Cash",
                            PayMethodType = 2,
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.Property<int>("PurchaseNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseNumber"));

                    b.Property<int?>("CartId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PurchaseNumber");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseDetailEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            PurchaseNumber = 1,
                            CartId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 29, DateTimeKind.Unspecified).AddTicks(3032), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            ProductId = "SDA01"
                        },
                        new
                        {
                            PurchaseNumber = 2,
                            CartId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 29, DateTimeKind.Unspecified).AddTicks(3048), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            ProductId = "SDA02"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", b =>
                {
                    b.Property<int>("PurchaseNumber")
                        .HasColumnType("integer");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("AppliedId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsReturned")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PurchaseNumber", "OptionId");

                    b.HasIndex("AppliedId")
                        .IsUnique();

                    b.HasIndex("OptionId");

                    b.ToTable("PurchaseDetailOptions", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            PurchaseNumber = 1,
                            OptionId = 1,
                            AppliedId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 31, DateTimeKind.Unspecified).AddTicks(5618), new TimeSpan(0, -4, 0, 0, 0)),
                            Quantity = 3,
                            UnitPrice = 1200.0
                        },
                        new
                        {
                            PurchaseNumber = 1,
                            OptionId = 2,
                            AppliedId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 31, DateTimeKind.Unspecified).AddTicks(5634), new TimeSpan(0, -4, 0, 0, 0)),
                            Quantity = 4,
                            UnitPrice = 800.0
                        },
                        new
                        {
                            PurchaseNumber = 2,
                            OptionId = 3,
                            AppliedId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 31, DateTimeKind.Unspecified).AddTicks(5636), new TimeSpan(0, -4, 0, 0, 0)),
                            Quantity = 2,
                            UnitPrice = 800.0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 32, DateTimeKind.Unspecified).AddTicks(7194), new TimeSpan(0, -4, 0, 0, 0)),
                            Description = "Excellent",
                            IsDeleted = false,
                            OptionId = 1,
                            Rating = 5f,
                            Title = "Nice product",
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        },
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 16, 26, 41, 32, DateTimeKind.Unspecified).AddTicks(7215), new TimeSpan(0, -4, 0, 0, 0)),
                            Description = "So so i liked the expierience a bit",
                            IsDeleted = false,
                            OptionId = 1,
                            Rating = 3f,
                            Title = "Kinda love it",
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("WishesList", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListProductsEntity", b =>
                {
                    b.Property<int>("WishListId")
                        .HasColumnType("integer");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.HasKey("WishListId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("WishListProductsEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.WarrantyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Warranties", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f6"),
                            Conditions = "Warranty 1",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 390, DateTimeKind.Unspecified).AddTicks(1703), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Warranty 1",
                            IsDeleted = false,
                            Name = "Warranty 1",
                            Period = "1 year",
                            Status = 1,
                            Type = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Security.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DefaultAddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DefaultPayMethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("PromotionalMails")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAddressId");

                    b.HasIndex("DefaultPayMethodId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            AccessFailedCount = 0,
                            Age = 45,
                            BirthDate = new DateOnly(1996, 10, 10),
                            ConcurrencyStamp = "da300112-13c5-4e24-b4cb-a67a022cc22b",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 43, DateTimeKind.Unspecified).AddTicks(3471), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            FullName = "Rosalba Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "ROSALBA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJi/sl2pPUj2LFU2tlgP508rzKSjKYzUeEmvO1DYP3Dp4cSBRsml02YV5IyPaW1FWA==",
                            PhoneNumber = "18497505944",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "ffc261ec-ca3f-481e-a730-a23be2ff12ec",
                            TwoFactorEnabled = false,
                            UserName = "Rosalba"
                        },
                        new
                        {
                            Id = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            AccessFailedCount = 0,
                            Age = 15,
                            BirthDate = new DateOnly(1996, 10, 10),
                            ConcurrencyStamp = "75ec262e-3396-4069-9d02-0b8f85f19642",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 43, DateTimeKind.Unspecified).AddTicks(3493), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "rosanny@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosanny Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSANNY@GMAIL.COM",
                            NormalizedUserName = "ROSANNY",
                            PasswordHash = "AQAAAAIAAYagAAAAECZzJMmhMwiKPrPGUbX5TuVFuAFSeCWKz2UOTPy+4aVOOW2c7QssdxRRsTGYtTnIxQ==",
                            PhoneNumber = "18497505945",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "d67d723f-ee84-4323-9810-ba6f5b22e74b",
                            TwoFactorEnabled = false,
                            UserName = "Rosanny"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            AccessFailedCount = 0,
                            Age = 15,
                            BirthDate = new DateOnly(1996, 10, 10),
                            ConcurrencyStamp = "5ae2e1a6-b7e7-4f00-b782-1ee11102115b",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 43, DateTimeKind.Unspecified).AddTicks(3506), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "rosalbapp@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosalba Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSALBAPP@GMAIL.COM",
                            NormalizedUserName = "ROSMERY2",
                            PasswordHash = "AQAAAAIAAYagAAAAEP0aEc1DLsEhPC7OqzT/SKd4FGEExlnUL2ZkafK179uU5BSf2yo0gMDgQnpXmvd0+Q==",
                            PhoneNumber = "18497505946",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "d6d6745a-83df-4825-bb91-e96c01e8dc01",
                            TwoFactorEnabled = false,
                            UserName = "Rosalba2"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            AccessFailedCount = 0,
                            Age = 15,
                            BirthDate = new DateOnly(1996, 10, 10),
                            ConcurrencyStamp = "198894ea-4254-40ee-afe5-a05c556c7748",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 43, DateTimeKind.Unspecified).AddTicks(3563), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "jendrypp@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Jendry Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JENDRYPP@GMAIL.COM",
                            NormalizedUserName = "JENDRY",
                            PasswordHash = "AQAAAAIAAYagAAAAEBx3nDF16oh/NrAwxd/D0ta0RyanPTn0oQLxmfWHsj4gBF8URzBy/IUZu+bXc4CgHw==",
                            PhoneNumber = "18497505947",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "b8adb814-c373-4512-b7b2-8785b66cdd6a",
                            TwoFactorEnabled = false,
                            UserName = "jendry"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            AccessFailedCount = 0,
                            Age = 15,
                            BirthDate = new DateOnly(1996, 10, 10),
                            ConcurrencyStamp = "b3e1fd1b-c231-4fe0-be9a-b0af6e574aaf",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 22, 20, 26, 41, 43, DateTimeKind.Unspecified).AddTicks(3591), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "rosmerypp@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosmery Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSMERYPP@GMAIL.COM",
                            NormalizedUserName = "ROSMERY",
                            PasswordHash = "AQAAAAIAAYagAAAAEBy+F3WhCWHBNPwSW2ISYxzgr5Kw7QI64xCVE5GhHl20y0IkRr5knCznLKNA+G4njg==",
                            PhoneNumber = "18497505948",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "468746b9-2deb-4c9f-a6cd-1cc17ae81130",
                            TwoFactorEnabled = false,
                            UserName = "Rosmery"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            Name = "Client",
                            NormalizedName = "CLIENTE"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            Name = "ProductsManager",
                            NormalizedName = "PRODUCTSMANAGER"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            Name = "SalesManager",
                            NormalizedName = "SALESMANAGER"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E4",
                            Name = "MarketingManager",
                            NormalizedName = "MARKETINGMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "RosaFiesta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "RosaFiesta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "RosaFiesta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E1"
                        },
                        new
                        {
                            UserId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            RoleId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3"
                        },
                        new
                        {
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E2"
                        },
                        new
                        {
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E3"
                        },
                        new
                        {
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("Quotes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteItemEntity", b =>
                {
                    b.HasOne("Domain.Entities.Enterprise.QuoteEntity", null)
                        .WithMany("QuoteItems")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Enterprise.ServiceEntity", null)
                        .WithMany("QuoteItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.MultipleOptionImages", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("Images")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Options")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.SubCategoryEntity", null)
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("Domain.Entities.Product.SupplierEntity", "Supplier")
                        .WithMany("ProductsSupplied")
                        .HasForeignKey("SupplierId");

                    b.HasOne("Domain.Entities.Product.WarrantyEntity", "Warranty")
                        .WithMany()
                        .HasForeignKey("WarrantyId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductsDiscountsEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.DiscountEntity", null)
                        .WithMany("ProductsDiscounts")
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithMany("ProductsDiscounts")
                        .HasForeignKey("OptionId");

                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Discounts")
                        .HasForeignKey("ProductCode");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.Product.SubCategoryEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.CategoryEntity", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.AppliedDiscountEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.DiscountEntity", null)
                        .WithMany("AppliedDiscounts")
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("AppliedDiscounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithOne("Cart")
                        .HasForeignKey("Domain.Entities.Product.UserInteract.CartEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.PayMethodEntity", "PayMethod")
                        .WithMany()
                        .HasForeignKey("PayMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("PayMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PayMethodEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("PayMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.UserInteract.CartEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.OrderEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", b =>
                {
                    b.HasOne("Domain.Entities.Product.UserInteract.AppliedDiscountEntity", "DiscountApplied")
                        .WithOne("PurchaseOption")
                        .HasForeignKey("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", "AppliedId");

                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", null)
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("PurchaseNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiscountApplied");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.ReviewEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListProductsEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.WishListEntity", null)
                        .WithMany("ProductsWish")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.Security.AddressEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.AddressEntity", "DefaultAddress")
                        .WithMany()
                        .HasForeignKey("DefaultAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Product.UserInteract.PayMethodEntity", "PayMethod")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Security.UserEntity", "DefaultPayMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultAddress");

                    b.Navigation("PayMethod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.Navigation("QuoteItems");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.ServiceEntity", b =>
                {
                    b.Navigation("QuoteItems");
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domain.Entities.Product.DiscountEntity", b =>
                {
                    b.Navigation("AppliedDiscounts");

                    b.Navigation("ProductsDiscounts");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductsDiscounts");

                    b.Navigation("PurchaseOptions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Discounts");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.Product.SubCategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product.SupplierEntity", b =>
                {
                    b.Navigation("ProductsSupplied");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.AppliedDiscountEntity", b =>
                {
                    b.Navigation("PurchaseOption")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.Navigation("PurchaseOptions");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.Navigation("ProductsWish");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AppliedDiscounts");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("PayMethods");

                    b.Navigation("Quotes");

                    b.Navigation("Reviews");

                    b.Navigation("WishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
