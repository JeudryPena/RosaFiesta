// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(RosaFiestaContext))]
    [Migration("20240121205055_ZipCodeAdded")]
    partial class ZipCodeAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RosaFiesta")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Quotes", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.DiscountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Discounts", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.MultipleOptionImagesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionImages", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Condition")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("GenderFor")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasMaxLength(100)
                        .HasColumnType("uuid");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("Options", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsService")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WarrantyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("OptionId")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("Products", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductsDiscountsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OptionId");

                    b.ToTable("ProductsDiscounts", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.SupplierEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Suppliers", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AddressEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f7"),
                            IsDeleted = false,
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        },
                        new
                        {
                            Id = new Guid("7d9b7113-a8f8-4035-99a7-a20dd400f6a3"),
                            IsDeleted = false,
                            UserId = "7d9b7113-a8f8-4035-99a7-a20dd400f6a3"
                        },
                        new
                        {
                            Id = new Guid("2301d884-221a-4e7d-b509-0113dcc043e1"),
                            IsDeleted = false,
                            UserId = "2301d884-221a-4e7d-b509-0113dcc043e1"
                        },
                        new
                        {
                            Id = new Guid("2301d884-221a-4e7d-b509-0113dcc043e2"),
                            IsDeleted = false,
                            UserId = "2301d884-221a-4e7d-b509-0113dcc043e2"
                        },
                        new
                        {
                            Id = new Guid("2301d884-221a-4e7d-b509-0113dcc043e3"),
                            IsDeleted = false,
                            UserId = "2301d884-221a-4e7d-b509-0113dcc043e3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<string>("PayerId")
                        .HasColumnType("text");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Shipping")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("QuoteId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WarrantyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("PurchaseDetails", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", b =>
                {
                    b.Property<Guid>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppliedId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReturned")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<double>("Taxes")
                        .HasColumnType("double precision");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DetailId", "OptionId");

                    b.HasIndex("AppliedId");

                    b.HasIndex("OptionId");

                    b.ToTable("PurchaseDetailsOptions", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("WishesList", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 55, 251, DateTimeKind.Unspecified).AddTicks(6311), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        },
                        new
                        {
                            Id = new Guid("7d9b7113-a8f8-4035-99a7-a20dd400f6a3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 55, 251, DateTimeKind.Unspecified).AddTicks(6391), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = "7d9b7113-a8f8-4035-99a7-a20dd400f6a3"
                        },
                        new
                        {
                            Id = new Guid("2301d884-221a-4e7d-b509-0113dcc043e1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 55, 251, DateTimeKind.Unspecified).AddTicks(6394), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = "2301d884-221a-4e7d-b509-0113dcc043e1"
                        },
                        new
                        {
                            Id = new Guid("2301d884-221a-4e7d-b509-0113dcc043e2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 55, 251, DateTimeKind.Unspecified).AddTicks(6396), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = "2301d884-221a-4e7d-b509-0113dcc043e2"
                        },
                        new
                        {
                            Id = new Guid("2301d884-221a-4e7d-b509-0113dcc043e3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 55, 251, DateTimeKind.Unspecified).AddTicks(6398), new TimeSpan(0, -4, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = "2301d884-221a-4e7d-b509-0113dcc043e3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListProductsEntity", b =>
                {
                    b.Property<Guid>("WishListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("WishListId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("WishesListProducts", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.WarrantyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Warranties", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.RoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7d9b7113-a8f8-4035-99a7-a20dd400f6a3",
                            IsDeleted = false,
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "2301d884-221a-4e7d-b509-0113dcc043e1",
                            IsDeleted = false,
                            Name = "ProductsManager",
                            NormalizedName = "PRODUCTSMANAGER"
                        },
                        new
                        {
                            Id = "2301d884-221a-4e7d-b509-0113dcc043e2",
                            IsDeleted = false,
                            Name = "SalesManager",
                            NormalizedName = "SALESMANAGER"
                        },
                        new
                        {
                            Id = "2301d884-221a-4e7d-b509-0113dcc043e3",
                            IsDeleted = false,
                            Name = "MarketingManager",
                            NormalizedName = "MARKETINGMANAGER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Security.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<bool>("PromotionalMails")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("WishListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 1),
                            ConcurrencyStamp = "155aba8c-82a3-45c3-85b0-3931602476d1",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 54, 882, DateTimeKind.Unspecified).AddTicks(2651), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "ROSALBA",
                            PasswordHash = "AQAAAAIAAYagAAAAEEvrEzseLtzwcAV1m15gk93cBK1x0eDIr9u4JMcTVqX/bO8iBJD6LesGOpljFDkbRA==",
                            PromotionalMails = false,
                            SecurityStamp = "ecb10222-4ed5-4acb-ab23-a230a0c8fbfd",
                            TwoFactorEnabled = false,
                            UserName = "Rosalba"
                        },
                        new
                        {
                            Id = "7d9b7113-a8f8-4035-99a7-a20dd400f6a3",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 2),
                            ConcurrencyStamp = "b14640a3-c403-41be-9c8c-1a490fde3c52",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 54, 882, DateTimeKind.Unspecified).AddTicks(2940), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "rosanny@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSANNY@GMAIL.COM",
                            NormalizedUserName = "ROSANNY",
                            PasswordHash = "AQAAAAIAAYagAAAAECNVr7cBUCZ6jr7xf2UqxOaQa2HRxOArAdFAf3mJyVM7HAObDtZkER7LxmSrkc2uHA==",
                            PromotionalMails = false,
                            SecurityStamp = "3eb81b3d-129e-4098-b54f-fae5799e04e6",
                            TwoFactorEnabled = false,
                            UserName = "Rosanny"
                        },
                        new
                        {
                            Id = "2301d884-221a-4e7d-b509-0113dcc043e1",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 3),
                            ConcurrencyStamp = "948154f9-976f-4fa3-8e4f-0c24affe5802",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 54, 882, DateTimeKind.Unspecified).AddTicks(2961), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "rosalbapp@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSALBAPP@GMAIL.COM",
                            NormalizedUserName = "ROSALBA2",
                            PasswordHash = "AQAAAAIAAYagAAAAEF44lrKX7GPnC6jw9lemW/G2nKNepkJ5FgrqV1eoX2R2ABNz9LqWFx0V9wmYSIOGnw==",
                            PromotionalMails = false,
                            SecurityStamp = "9d9f5d64-cf08-4d23-90c7-ad5c8150eae9",
                            TwoFactorEnabled = false,
                            UserName = "Rosalba2"
                        },
                        new
                        {
                            Id = "2301d884-221a-4e7d-b509-0113dcc043e2",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 4),
                            ConcurrencyStamp = "510098b3-885d-494a-a708-74a83212ae93",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 54, 882, DateTimeKind.Unspecified).AddTicks(2973), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "jendrypp@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JENDRYPP@GMAIL.COM",
                            NormalizedUserName = "JENDRY",
                            PasswordHash = "AQAAAAIAAYagAAAAEDvQ9qyzj9CDvO2edxZ1Z0iRG8oM218k1jcpN9JTvu2YhJwQCS5VFyHSizTpc+dqSw==",
                            PromotionalMails = false,
                            SecurityStamp = "dcea6609-4b6e-4b96-be97-f254a472a1cb",
                            TwoFactorEnabled = false,
                            UserName = "Jendry"
                        },
                        new
                        {
                            Id = "2301d884-221a-4e7d-b509-0113dcc043e3",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 5),
                            ConcurrencyStamp = "028a9fac-bfe4-49f2-b327-d877bececf81",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 21, 16, 50, 54, 882, DateTimeKind.Unspecified).AddTicks(2983), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "rosmerypp@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSMERYPP@GMAIL.COM",
                            NormalizedUserName = "ROSMERY",
                            PasswordHash = "AQAAAAIAAYagAAAAEAcbyrQaEzNZC4EMUHHzgyOOosCe1PY0yxBuIJI4t4X9hAyXzfVlZrVlSRRCfuasrQ==",
                            PromotionalMails = false,
                            SecurityStamp = "d2d1bade-0394-433e-b415-a74b5550d397",
                            TwoFactorEnabled = false,
                            UserName = "Rosmery"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Security.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            RoleId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = "7d9b7113-a8f8-4035-99a7-a20dd400f6a3",
                            RoleId = "7d9b7113-a8f8-4035-99a7-a20dd400f6a3",
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = "2301d884-221a-4e7d-b509-0113dcc043e1",
                            RoleId = "2301d884-221a-4e7d-b509-0113dcc043e1",
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = "2301d884-221a-4e7d-b509-0113dcc043e2",
                            RoleId = "2301d884-221a-4e7d-b509-0113dcc043e2",
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = "2301d884-221a-4e7d-b509-0113dcc043e3",
                            RoleId = "2301d884-221a-4e7d-b509-0113dcc043e3",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Security.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.UserInteract.OrderEntity", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("Quotes")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.Product.MultipleOptionImagesEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("Images")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.MultipleOptionImagesEntity", "Image")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Product.OptionEntity", "ImageId");

                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Options")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Product.ProductEntity", "OptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Product.SupplierEntity", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.HasOne("Domain.Entities.Product.WarrantyEntity", "Warranty")
                        .WithMany("Products")
                        .HasForeignKey("WarrantyId");

                    b.Navigation("Category");

                    b.Navigation("Option");

                    b.Navigation("Supplier");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductsDiscountsEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.DiscountEntity", "Discount")
                        .WithMany("ProductsDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithMany("ProductsDiscounts")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithOne("Cart")
                        .HasForeignKey("Domain.Entities.Product.UserInteract.CartEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.UserInteract.AddressEntity", "Address")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Product.UserInteract.OrderEntity", "AddressId");

                    b.HasOne("Domain.Entities.Enterprise.QuoteEntity", "Quote")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Product.UserInteract.OrderEntity", "QuoteId");

                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.UserInteract.CartEntity", "Cart")
                        .WithMany("Details")
                        .HasForeignKey("CartId");

                    b.HasOne("Domain.Entities.Product.UserInteract.OrderEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.WarrantyEntity", "Warranty")
                        .WithMany()
                        .HasForeignKey("WarrantyId");

                    b.Navigation("Cart");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", b =>
                {
                    b.HasOne("Domain.Entities.Product.DiscountEntity", "Discount")
                        .WithMany("AppliedOptions")
                        .HasForeignKey("AppliedId");

                    b.HasOne("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", null)
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.ReviewEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithOne("WishList")
                        .HasForeignKey("Domain.Entities.Product.UserInteract.WishListEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListProductsEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.WishListEntity", null)
                        .WithMany("ProductsWish")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.Security.RoleClaim", b =>
                {
                    b.HasOne("Domain.Entities.Security.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Security.UserClaim", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Security.UserLogin", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Security.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Security.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserToken", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product.DiscountEntity", b =>
                {
                    b.Navigation("AppliedOptions");

                    b.Navigation("ProductsDiscounts");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductsDiscounts");

                    b.Navigation("PurchaseOptions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.Product.SupplierEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.Navigation("PurchaseOptions");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.Navigation("ProductsWish");
                });

            modelBuilder.Entity("Domain.Entities.Product.WarrantyEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Security.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Quotes");

                    b.Navigation("UserRoles");

                    b.Navigation("WishList");
                });
#pragma warning restore 612, 618
        }
    }
}
