// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(RosaFiestaContext))]
    partial class RosaFiestaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RosaFiesta")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Quotes", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasMaxLength(250)
                        .HasColumnType("integer");

                    b.Property<int>("QuoteId")
                        .HasMaxLength(36)
                        .HasColumnType("integer");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("ServiceId");

                    b.ToTable("QuoteItemEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("character varying(700)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityAvaliable")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Services", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CategoryEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.DiscountEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxTimesApply")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Code");

                    b.ToTable("DiscountEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.MultipleOptionImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionImages", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Condition")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GenderFor")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Material")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("QuantityAvaliable")
                        .HasColumnType("integer");

                    b.Property<float?>("Size")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductCode");

                    b.ToTable("Options", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("WarrantyId")
                        .HasColumnType("uuid");

                    b.HasKey("Code");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("ProductEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductsDiscountsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductEntityCode")
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductEntityCode");

                    b.ToTable("ProductsDiscountsEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.SubCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubCategoryEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.SupplierEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("SupplierEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.AppliedDiscountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("UserId");

                    b.ToTable("AppliedDiscounts", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CartEntity", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        },
                        new
                        {
                            CartId = 2,
                            UserId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3"
                        },
                        new
                        {
                            CartId = 3,
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E1"
                        },
                        new
                        {
                            CartId = 4,
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E2"
                        },
                        new
                        {
                            CartId = 5,
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PayMethodId")
                        .HasColumnType("uuid");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("double precision");

                    b.Property<double>("TaxesCost")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("VoucherNumber")
                        .HasColumnType("integer");

                    b.Property<string>("VoucherSeries")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("VoucherType")
                        .HasMaxLength(35)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PayMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PayMethodEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PayMethodType")
                        .HasMaxLength(10)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PayMethodEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.Property<int>("PurchaseNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseNumber"));

                    b.Property<int?>("CartId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PurchaseNumber");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseDetailEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", b =>
                {
                    b.Property<int>("PurchaseNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("AppliedId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReturned")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PurchaseNumber", "OptionId");

                    b.HasIndex("AppliedId")
                        .IsUnique();

                    b.HasIndex("OptionId");

                    b.ToTable("PurchaseDetailOptions", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WishesList", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListProductsEntity", b =>
                {
                    b.Property<int>("WishListId")
                        .HasColumnType("integer");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("WishListId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("WishListProductsEntity", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.WarrantyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Warranties", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DefaultAddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DefaultPayMethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("PromotionalMails")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAddressId");

                    b.HasIndex("DefaultPayMethodId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            AccessFailedCount = 0,
                            Age = 45,
                            BirthDate = new DateOnly(1999, 1, 1),
                            ConcurrencyStamp = "f7baa828-fb76-4e9f-9038-3a5976089e5f",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 25, 12, 34, 59, 252, DateTimeKind.Unspecified).AddTicks(6468), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            FullName = "Rosalba Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "ROSALBA",
                            PasswordHash = "AQAAAAIAAYagAAAAECpxjs7xhd5O4f/uyCKO+dcTYoYiCH1yoAHZiHfh+5aVZF0+2lKkv8Jt8YHbyH8Dfw==",
                            PhoneNumber = "18497505944",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "6c3b5d5f-66ca-416b-b31a-e3afb9cc1674",
                            TwoFactorEnabled = false,
                            UserName = "Rosalba"
                        },
                        new
                        {
                            Id = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            AccessFailedCount = 0,
                            Age = 15,
                            BirthDate = new DateOnly(1999, 1, 2),
                            ConcurrencyStamp = "729f145b-bd0b-4a7a-9173-e131ffd4bc67",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 25, 12, 34, 59, 252, DateTimeKind.Unspecified).AddTicks(6715), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "",
                            Email = "rosanny@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosanny Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSANNY@GMAIL.COM",
                            NormalizedUserName = "ROSANNY",
                            PasswordHash = "AQAAAAIAAYagAAAAEB5vlA0x5bHS+p8E6/tsUNKrN+xyfY+gpItzbtlEYoMauBNzJ1aXlSko8JOMIO4ngQ==",
                            PhoneNumber = "18497505945",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "6872fa88-edae-4159-8a87-d2cf9f191f29",
                            TwoFactorEnabled = false,
                            UserName = "Rosanny"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            AccessFailedCount = 0,
                            Age = 15,
                            BirthDate = new DateOnly(1999, 1, 3),
                            ConcurrencyStamp = "37339a29-ea4e-4c5f-9741-c7f784a5d642",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 25, 12, 34, 59, 252, DateTimeKind.Unspecified).AddTicks(6729), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "",
                            Email = "rosalbapp@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosalba Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSALBAPP@GMAIL.COM",
                            NormalizedUserName = "ROSMERY2",
                            PasswordHash = "AQAAAAIAAYagAAAAEK5VLGhvsmPCyNCImUmaxwYV1WZ2ZksbCxvzTYVuavqpGiLU7juDbyn4rusbIcq+Rw==",
                            PhoneNumber = "18497505946",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "27af544a-f7c9-4939-92fa-96546cd7a564",
                            TwoFactorEnabled = false,
                            UserName = "Rosalba2"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            AccessFailedCount = 0,
                            Age = 15,
                            BirthDate = new DateOnly(1999, 1, 4),
                            ConcurrencyStamp = "24a03d23-83d5-46ec-95cd-e97133d3f49b",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 25, 12, 34, 59, 252, DateTimeKind.Unspecified).AddTicks(6739), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "",
                            Email = "jendrypp@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Jendry Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JENDRYPP@GMAIL.COM",
                            NormalizedUserName = "JENDRY",
                            PasswordHash = "AQAAAAIAAYagAAAAEFMRaq6OV28QGCLGL/ccfvoJlV5Y14mCe6wOcM8QLTEEfvnlRWTIYUXNU27CmpG25w==",
                            PhoneNumber = "18497505947",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "d910c400-a45a-43cf-97ee-e6f11cfa76d8",
                            TwoFactorEnabled = false,
                            UserName = "jendry"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            AccessFailedCount = 0,
                            Age = 15,
                            BirthDate = new DateOnly(1999, 1, 5),
                            ConcurrencyStamp = "4356958b-e234-4fcf-a704-fce1a1a68d25",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 6, 25, 12, 34, 59, 252, DateTimeKind.Unspecified).AddTicks(6784), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "",
                            Email = "rosmerypp@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosmery Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSMERYPP@GMAIL.COM",
                            NormalizedUserName = "ROSMERY",
                            PasswordHash = "AQAAAAIAAYagAAAAEIYqECmmIUbmacT9mJDONcqNX+e4xIkU1T73KjFponTBDLrRi7aNUQ/ZfKK7xaOeNw==",
                            PhoneNumber = "18497505948",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "e51b21ec-b0be-4410-987b-a1575eadbfe3",
                            TwoFactorEnabled = false,
                            UserName = "Rosmery"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            Name = "Client",
                            NormalizedName = "CLIENTE"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            Name = "ProductsManager",
                            NormalizedName = "PRODUCTSMANAGER"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            Name = "SalesManager",
                            NormalizedName = "SALESMANAGER"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E4",
                            Name = "MarketingManager",
                            NormalizedName = "MARKETINGMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "RosaFiesta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "RosaFiesta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "RosaFiesta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E1"
                        },
                        new
                        {
                            UserId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            RoleId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3"
                        },
                        new
                        {
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E2"
                        },
                        new
                        {
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E3"
                        },
                        new
                        {
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("Quotes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteItemEntity", b =>
                {
                    b.HasOne("Domain.Entities.Enterprise.QuoteEntity", null)
                        .WithMany("QuoteItems")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Enterprise.ServiceEntity", null)
                        .WithMany("QuoteItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.MultipleOptionImages", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("Images")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Options")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.SubCategoryEntity", null)
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("Domain.Entities.Product.SupplierEntity", "Supplier")
                        .WithMany("ProductsSupplied")
                        .HasForeignKey("SupplierId");

                    b.HasOne("Domain.Entities.Product.WarrantyEntity", "Warranty")
                        .WithMany()
                        .HasForeignKey("WarrantyId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductsDiscountsEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.DiscountEntity", null)
                        .WithMany("ProductsDiscounts")
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithMany("ProductsDiscounts")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Discounts")
                        .HasForeignKey("ProductEntityCode");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.Product.SubCategoryEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.CategoryEntity", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.AppliedDiscountEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.DiscountEntity", null)
                        .WithMany("AppliedDiscounts")
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("AppliedDiscounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithOne("Cart")
                        .HasForeignKey("Domain.Entities.Product.UserInteract.CartEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.PayMethodEntity", "PayMethod")
                        .WithMany()
                        .HasForeignKey("PayMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("PayMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PayMethodEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("PayMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.UserInteract.CartEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.OrderEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", b =>
                {
                    b.HasOne("Domain.Entities.Product.UserInteract.AppliedDiscountEntity", "DiscountApplied")
                        .WithOne("PurchaseOption")
                        .HasForeignKey("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", "AppliedId");

                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", null)
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("PurchaseNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiscountApplied");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.ReviewEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListProductsEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.WishListEntity", null)
                        .WithMany("ProductsWish")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.Security.AddressEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.AddressEntity", "DefaultAddress")
                        .WithMany()
                        .HasForeignKey("DefaultAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Product.UserInteract.PayMethodEntity", "PayMethod")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Security.UserEntity", "DefaultPayMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultAddress");

                    b.Navigation("PayMethod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.Navigation("QuoteItems");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.ServiceEntity", b =>
                {
                    b.Navigation("QuoteItems");
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domain.Entities.Product.DiscountEntity", b =>
                {
                    b.Navigation("AppliedDiscounts");

                    b.Navigation("ProductsDiscounts");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductsDiscounts");

                    b.Navigation("PurchaseOptions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Discounts");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.Product.SubCategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product.SupplierEntity", b =>
                {
                    b.Navigation("ProductsSupplied");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.AppliedDiscountEntity", b =>
                {
                    b.Navigation("PurchaseOption")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.Navigation("PurchaseOptions");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.Navigation("ProductsWish");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AppliedDiscounts");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("PayMethods");

                    b.Navigation("Quotes");

                    b.Navigation("Reviews");

                    b.Navigation("WishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
