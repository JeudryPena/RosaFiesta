// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(RosaFiestaContext))]
    partial class RosaFiestaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RosaFiesta")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Quotes", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.DiscountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Discounts", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.MultipleOptionImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionImages", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Condition")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMale")
                        .HasMaxLength(20)
                        .HasColumnType("boolean");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasMaxLength(100)
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Options", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsService")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("WarrantyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("Products", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductsDiscountsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("ProductsDiscounts", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.SupplierEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Suppliers", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            CartId = new Guid("2301d884-221a-4e7d-b509-0113dcc043e3"),
                            IsDeleted = false,
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7"
                        },
                        new
                        {
                            CartId = new Guid("2301d884-221a-4e7d-b509-0113dcc043e2"),
                            IsDeleted = false,
                            UserId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3"
                        },
                        new
                        {
                            CartId = new Guid("2301d884-221a-4e7d-b509-0113dcc043e1"),
                            IsDeleted = false,
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E1"
                        },
                        new
                        {
                            CartId = new Guid("7d9b7113-a8f8-4035-99a7-a20dd400f6a3"),
                            IsDeleted = false,
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E2"
                        },
                        new
                        {
                            CartId = new Guid("b22698b8-42a2-4115-9631-1c2d1e2ac5f7"),
                            IsDeleted = false,
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PayMethodId")
                        .HasColumnType("uuid");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TaxesCost")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("VoucherNumber")
                        .HasColumnType("integer");

                    b.Property<string>("VoucherSeries")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("VoucherType")
                        .HasMaxLength(35)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PayMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PayMethodEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PayMethods", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.Property<Guid>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DetailId");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuoteId");

                    b.ToTable("PurchaseDetails", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", b =>
                {
                    b.Property<Guid>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppliedId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReturned")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DetailId", "OptionId");

                    b.HasIndex("AppliedId");

                    b.HasIndex("OptionId");

                    b.ToTable("PurchaseDetailsOptions", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("WishesList", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListProductsEntity", b =>
                {
                    b.Property<Guid>("WishListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("WishListId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("WishesListProducts", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Product.WarrantyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Warranties", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExtraDetails")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.RoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            IsDeleted = false,
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            IsDeleted = false,
                            Name = "ProductsManager",
                            NormalizedName = "PRODUCTSMANAGER"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            IsDeleted = false,
                            Name = "SalesManager",
                            NormalizedName = "SALESMANAGER"
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E4",
                            IsDeleted = false,
                            Name = "MarketingManager",
                            NormalizedName = "MARKETINGMANAGER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Security.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("DefaultAddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DefaultPayMethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("PromotionalMails")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("WishListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAddressId");

                    b.HasIndex("DefaultPayMethodId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            Id = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 1),
                            ConcurrencyStamp = "7c27e0c1-6a88-44ac-aa27-e6bbae6e7dc0",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 12, 20, 18, 4, 168, DateTimeKind.Unspecified).AddTicks(5554), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            FullName = "Rosalba Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ/6usYs+/ijoH/IWU2r93P7cnu+6eFHM/zLLwkDYZC8yhw7ooYFDpmuoR4sdTBQqw==",
                            PhoneNumber = "18497505944",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "b326ee9b-3546-4f38-9213-ca55a6262a67",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 2),
                            ConcurrencyStamp = "5fd9a6b0-c50c-4d42-a12d-4408706f491e",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 12, 20, 18, 4, 168, DateTimeKind.Unspecified).AddTicks(5943), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "rosanny@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosanny Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSANNY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN7MtChicLFkzBtdFzeEWgLzvxgER9yXrf0dLhF3eaW5EoDjK0RmnCv/IVuJ0azBXQ==",
                            PhoneNumber = "18497505945",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "bfecf4b9-d73b-4587-8bd6-ca124a2294f6",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 3),
                            ConcurrencyStamp = "f790da78-860e-4431-b59e-e05a2507c963",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 12, 20, 18, 4, 168, DateTimeKind.Unspecified).AddTicks(5968), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "rosalbapp@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosalba Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSALBAPP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGs+LthkLw70S5hNxckq+RSa1bZQBiKs3ByuMVcCK6yuksh2T4CGnItVMHiUUzjrWw==",
                            PhoneNumber = "18497505946",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "65757c69-26b0-4836-a358-53e395c5d08d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 4),
                            ConcurrencyStamp = "282a6def-9a20-46e9-b9b3-9f2276806f92",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 12, 20, 18, 4, 168, DateTimeKind.Unspecified).AddTicks(6879), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "jendrypp@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Jendry Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JENDRYPP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPymBJ1HPBgMqtvOH5UGTNyJ0UiztxZBNtf6JeBdGdXM0Z0LG3jLJ5FUXJVX5Lk/IA==",
                            PhoneNumber = "18497505947",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "f4a44f38-3348-4275-bf0a-5f016bdb322d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1999, 1, 5),
                            ConcurrencyStamp = "8cb988e7-ef5c-4388-a089-36510b35e225",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 12, 20, 18, 4, 168, DateTimeKind.Unspecified).AddTicks(6902), new TimeSpan(0, -4, 0, 0, 0)),
                            Email = "rosmerypp@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosmery Pena",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSMERYPP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBoEwaCmUWlHtE4XZVzP1jmCE/0kwMzxNlyndNk23/FEpQxveO+BLI9+aCCj1Voa/Q==",
                            PhoneNumber = "18497505948",
                            PhoneNumberConfirmed = true,
                            PromotionalMails = false,
                            SecurityStamp = "661e24a0-33e8-4c1b-bfc4-40ab6f0b2569",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Security.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "RosaFiesta");

                    b.HasData(
                        new
                        {
                            UserId = "b22698b8-42a2-4115-9631-1c2d1e2ac5f7",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            RoleId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E2",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = "2301D884-221A-4E7D-B509-0113DCC043E3",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E4",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Security.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "RosaFiesta");
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("Quotes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Product.MultipleOptionImages", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("Images")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Options")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.SupplierEntity", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.HasOne("Domain.Entities.Product.WarrantyEntity", "Warranty")
                        .WithMany("Products")
                        .HasForeignKey("WarrantyId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductsDiscountsEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.DiscountEntity", "Discount")
                        .WithMany("ProductsDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithMany("ProductsDiscounts")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Discounts")
                        .HasForeignKey("ProductEntityId");

                    b.Navigation("Discount");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithOne("Cart")
                        .HasForeignKey("Domain.Entities.Product.UserInteract.CartEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.PayMethodEntity", "PayMethod")
                        .WithMany()
                        .HasForeignKey("PayMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("PayMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PayMethodEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("PayMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.UserInteract.CartEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("CartId");

                    b.HasOne("Domain.Entities.Product.UserInteract.OrderEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.Entities.Product.ProductEntity", null)
                        .WithMany("Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Enterprise.QuoteEntity", null)
                        .WithMany("QuoteItems")
                        .HasForeignKey("QuoteId");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailOptions", b =>
                {
                    b.HasOne("Domain.Entities.Product.DiscountEntity", "Discount")
                        .WithMany("AppliedOptions")
                        .HasForeignKey("AppliedId");

                    b.HasOne("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", null)
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.ReviewEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithOne("WishList")
                        .HasForeignKey("Domain.Entities.Product.UserInteract.WishListEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListProductsEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.OptionEntity", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.UserInteract.WishListEntity", null)
                        .WithMany("ProductsWish")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.Security.AddressEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Security.RoleClaim", b =>
                {
                    b.HasOne("Domain.Entities.Security.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Security.UserClaim", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.HasOne("Domain.Entities.Security.AddressEntity", "DefaultAddress")
                        .WithMany()
                        .HasForeignKey("DefaultAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Product.UserInteract.PayMethodEntity", "PayMethod")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Security.UserEntity", "DefaultPayMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultAddress");

                    b.Navigation("PayMethod");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserLogin", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Security.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Security.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserToken", b =>
                {
                    b.HasOne("Domain.Entities.Security.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Enterprise.QuoteEntity", b =>
                {
                    b.Navigation("QuoteItems");
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product.DiscountEntity", b =>
                {
                    b.Navigation("AppliedOptions");

                    b.Navigation("ProductsDiscounts");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductsDiscounts");

                    b.Navigation("PurchaseOptions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Discounts");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.Product.SupplierEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.CartEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.OrderEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.PurchaseDetailEntity", b =>
                {
                    b.Navigation("PurchaseOptions");
                });

            modelBuilder.Entity("Domain.Entities.Product.UserInteract.WishListEntity", b =>
                {
                    b.Navigation("ProductsWish");
                });

            modelBuilder.Entity("Domain.Entities.Product.WarrantyEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Security.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("PayMethods");

                    b.Navigation("Quotes");

                    b.Navigation("Reviews");

                    b.Navigation("UserRoles");

                    b.Navigation("WishList");
                });
#pragma warning restore 612, 618
        }
    }
}
